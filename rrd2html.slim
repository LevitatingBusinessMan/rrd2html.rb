ruby:
    require 'cgi'
    $cgi = CGI.new
    puts $cgi.http_header "text/html"
    s_time = Time.now

    require 'tomlrb'
    require 'base64'
    $conf = Tomlrb.load_file ENV["CONF"] || "/etc/rrd2html.toml", symbolize_keys: true

    $genline = ->(l, i) {"\
    DEF:d#{i}=#{File.join($conf[:datadir], l[:file])}:#{l[:val] || $conf[:val] || 'value:AVERAGE'} \
    #{"CDEF:d#{i}i=d#{i},-1,*" if l[:inv]} \
    LINE:d#{i}#{"i" if l[:inv]}#{l[:color] || $conf[:color] || '#FF0000'}:#{l[:name].inspect} \
    "}

    def self.render graph
        Base64.encode64 `
            rrdtool graph - \
            --start=end-#{graph[:span] || ($cgi["span"] if $cgi.include? "span") || $conf[:span] || "1h"} \
            --end=now \
            #{"--title=#{graph[:title].inspect}" if graph[:title]} \
            #{graph[:lines].each_with_index.map(&$genline).join(" ")} \
            --width=#{(graph[:dimensions] || $conf[:dimensions] || [300,100]).join ' --height='}} \
        `
    end

doctype html
head
    title = "rrd2html.slim #{$cgi.host}"
    css:
        label, select { margin-right: 5px }
        .graphs { display: flex; gap: 5px; align-items: center; flex-wrap: wrap; }
    javascript:
        let timeout = Number((new URLSearchParams(window.location.search)).get("interval"));
        if (timeout != 0) setTimeout(location.reload.bind(location), timeout * 1000);
body 
    h1: a href="https://github.com/LevitatingBusinessMan/rrd2html.rb" rrd2html.slim
    form
        label Span:
        select name="span"
            - for opt in ["1h", "6h", "1day", "1week", "1month"]
                option value=opt selected=(opt == $cgi["span"]) #{opt}
                label span
        label Interval:
        select name="interval"
            - for secs, name in [[0, "none"], [5, "5 seconds"], [60, "1 minute"], [500, "5 minutes"]]
                option value=secs selected=(secs.to_s == $cgi["interval"]) #{name}
        button type="submit" go
    br
    .graphs
        - $conf[:graphs].each do |graph|
            img.graph src="data:image;base64,#{render graph}"/

    p = "#{Time.now} in #{(Time.now - s_time).round 2}s"
